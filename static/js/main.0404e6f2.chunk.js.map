{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","console","log","lat","month","season","Date","getMonth","className","Spinner","class","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAGMA,EAAe,CACnBC,OAAS,CACPC,KAAO,sBACPC,SAAW,OAEbC,OAAS,CACPF,KAAO,qBACPC,SAAW,cA8BAE,EAjBO,SAACC,GACrBC,QAAQC,IAAIF,EAAMG,KAClB,IAXiBA,EAAKC,EAWhBC,GAXWF,EAWQH,EAAMG,KAXTC,GAWc,IAAIE,MAAOC,YAVpC,GAAKH,EAAQ,EACfD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAS9B,EAAyBT,EAAaW,GAA/BT,EAAP,EAAOA,KAAMC,EAAb,EAAaA,SAGb,OAFAI,QAAQC,IAAI,SAAUG,GAGpB,sBAAKG,UAAS,yBAAoBH,GAAlC,UACE,mBAAGG,UAAS,4BAAuBX,EAAvB,WACZ,6BAAKD,IACL,mBAAGY,UAAS,6BAAwBX,EAAxB,eCjCZY,G,MAAU,SAACT,GACb,OACI,qBAAKU,MAAM,mBAAX,SACI,qBAAKA,MAAM,qBAAX,SAAiCV,EAAMW,cAKnDF,EAAQG,aAAe,CACnBD,QAAS,cAGEF,QCRTI,E,4MAOFC,MAAS,CAACX,IAAK,KAAMY,aAAc,I,uDAEnC,WAAqB,IAAD,OAChBd,QAAQC,IAAI,2CACZc,OAAOC,UAAUC,YAAYC,oBACzB,SAAAC,GAEI,EAAKC,SAAS,CAAElB,IAAMiB,EAASE,OAAOC,cAE1C,SAAAC,GACI,EAAKH,SAAS,CAACN,aAAeS,EAAIb,e,gCAK9C,WACIV,QAAQC,IAAI,mD,2BAGhB,WACI,OAAGuB,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMX,IAC/B,4CAAesB,KAAKX,MAAMC,aAA1B,QAGPU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMX,IAC/B,cAAC,EAAD,CAAeA,IAAKsB,KAAKX,MAAMX,MAGnC,cAAC,EAAD,CAASQ,QAAQ,qC,oBAG5B,WACI,OACI,qBAAKH,UAAU,aAAf,SACKiB,KAAKC,sB,GAzCJC,IAAMC,WAgDxBC,IAASC,OACL,cAAC,EAAD,IAAQC,SAASC,cAAc,Y","file":"static/js/main.0404e6f2.chunk.js","sourcesContent":["import './seasonDisplay.css';\r\nimport React from 'react';\r\n\r\nconst seasonConfig = {\r\n  summer : {\r\n    text : \"Let's hit the beach\",\r\n    iconName : \"sun\"\r\n  },\r\n  winter : {\r\n    text : \"Burr, it is chilly\",\r\n    iconName : \"snowflake\"\r\n  }\r\n}\r\n\r\nconst getSeason = (lat, month) => {\r\n  if(month > 2 && month < 9) {\r\n    return lat > 0 ? 'summer' : 'winter';\r\n  }\r\n  else {\r\n    return lat > 0 ? 'winter' : 'summer';\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  console.log(props.lat);\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n // const text = season === 'winter' ? 'Burr, it is chilly' : 'Lets hit the beach';\r\n  //const icon = season === 'winter' ? 'snowflake' : 'sun';\r\n  const {text, iconName} = seasonConfig[season];\r\n  console.log(\"season\", season);\r\n  \r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;","import React from  'react';\r\n\r\nconst Spinner = (props) => {\r\n    return(\r\n        <div class=\"ui active dimmer\">\r\n            <div class=\"ui big text loader\">{props.message}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message: 'Loading...'\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport Spinner from './Spinner';\r\n\r\nclass App extends React.Component {\r\n    /*constructor(props) {\r\n        super(props);\r\n        //initialize the state\r\n        this.state = {lat: null, errorMessage: \"\"};\r\n    }*/\r\n\r\n    state =  {lat: null, errorMessage: \"\"};\r\n\r\n    componentDidMount() {\r\n        console.log(\"My component was rendered to the screen\");\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => {\r\n                //we called set state to update the state\r\n                this.setState({ lat : position.coords.latitude});\r\n            },\r\n            err => {\r\n                this.setState({errorMessage : err.message})\r\n            }\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log('my component was just updated - it rerendered');\r\n    }\r\n\r\n    renderContent() {\r\n        if(this.state.errorMessage && !this.state.lat) {\r\n            return <div> Error : {this.state.errorMessage} </div>;\r\n        }\r\n\r\n        if(!this.state.errorMessage && this.state.lat) {\r\n            return <SeasonDisplay lat={this.state.lat}/>\r\n        }\r\n\r\n        return <Spinner message=\"Please accept location request\"/>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"border red\">\r\n                {this.renderContent()}\r\n             </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nReactDOM.render(\r\n    <App />,document.querySelector(\"#root\")\r\n); "],"sourceRoot":""}